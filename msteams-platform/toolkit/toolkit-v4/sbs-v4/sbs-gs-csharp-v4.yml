### YamlMime:Tutorial
title: Build your first app using C#
metadata:
  title: Hello World with C#
  description: In this tutorial, you'll learn to build Hello World app with C# by setting up a new project, build and deploy tab, bot and message extension apps.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/toolkit/toolkit-v4/teams-toolkit-tutorial-v4.md
  nextTutorialTitle: Back to Teams app tutorials
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Start Microsoft Teams app development by building your first app with a tab, a bot, and a message extension capability.

    This app will have all capabilities and each has its own UI and UX:

    :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/your-helloworld-app-v4.png" alt-text="Diagram showing this app has three features.":::

    In this tutorial, you'll learn:

    - How to set up a new project.
    - How to build apps with tab capability using C# and Visual Studio.

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Here's a list of tools you'll need to install for building and deploying a Teams app.

    | &nbsp; | Install | For using... |
    | --- | --- | --- |
    | **Required** | &nbsp; | &nbsp; |
    | &nbsp; | [Visual Studio 2022 version 17.3](https://visualstudio.microsoft.com)<br> Install the <br> **ASP.NET and web development** workload.| You can install the enterprise version in Visual Studio 2022, and install the workloads. |
    | &nbsp; | [Teams Toolkit](#install-teams-toolkit) | A Visual Studio extension that creates a project scaffolding for your app. Use latest version. |
    | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, call - all in one place. |

    ## Install Teams Toolkit

    Teams Toolkit helps simplify the development process with tools to create a project scaffolding for your app. It creates the necessary directory structure for all selected capabilities with the required files in place, ready to build the project.

    Teams Toolkit is available as an extension in Visual Studio.

    You can download the latest Visual Studio installer from the [Visual Studio download page](https://visualstudio.microsoft.com).

    > [!NOTE]
    > You'll need to first install the Visual Studio installer before installing Visual Studio.

    After you open the Visual Studio installer, in the pop-up workloads window.

      1. Select the box **ASP.NET and web development** workload.
      1. Select the box **Microsoft Teams development tools** in the installation details panel.
      1. Select **Install**.

          :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/visual-studio-install_1-v4.png" alt-text="Visual studio-installation":::

      1. Select **Launch** to open Visual Studio.

          :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/visual-studio-launch1-v4.png" alt-text="Launch visual studio":::
          
         > [!IMPORTANT]
         > You're recommended to download Visual Studio 2022 17.3.0 version, since Teams Toolkit for Visual Studio is GA in this version. This article is written for Visual Studio 2022 17.3.0 version. Teams Toolkit version 17.3.* or higher.

      1. Select **Extensions** > **Manage Extensions**.

          :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/select-extension-v4.png" alt-text="Select Extensions.":::

         The following Manage Extension window appears:

          :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/manage-extension-v4.png" alt-text="Manage Extensions.":::

      1. Select **Installed** and you can see **Teams Toolkit** extension installed.
    
          :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/select-ttk-v4.png" alt-text="Select Teams Toolkit":::

    ## Set up your Teams development tenant

    A **tenant** is like a space, or a container for your organization in Teams, where you chat, share files, and run meetings. This space is also where you upload and test your custom app. Let's verify if you're ready to develop with the tenant.

    ### Check for custom app upload option

    After creating the app, you must load your app in Teams without distributing it. This process is known as custom app upload. Sign in to your Microsoft 365 account to view this option.

    > [!NOTE]
    > Custom app upload is necessary for previewing and testing apps in Teams local environment. If it isn't enabled, you will not be able to preview and test your app in Teams locally.
    
    Do you already have a tenant, and do you have the admin access? Let's check if you really do!

    Verify if you can upload a custom app in Teams:

    1. In the Teams client, select **Apps**.
    1. Select **Manage your apps**.
    1. Select **Upload an app**.
    1. Look for the option to **Upload a customised app**. If the option is visible, you've enabled custom app upload.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/upload-custom-app-v4.png" alt-text="Screenshot shows the option to upload a customised app in Teams.":::

        > [!NOTE]
        > If Teams doesn't show the option to upload a custom app, talk to your Teams administrator.

    ### Create a free Teams developer tenant (optional)

    If you don't have a Teams account, you can get it free. Join the Microsoft 365 developer program!

    1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
    1. Select **Join Now** and follow the onscreen instructions.
    1. In the welcome screen, select **Set up E5 subscription**.
    1. Set up your administrator account. After you finish, the following screen appears:

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/dev-program-subscription-v4.png" alt-text="Example of what you see after signing up for the Microsoft 365 developer program.":::

    1. Sign in to Teams using the administrator account you just set up. Verify that you have the **Upload a custom app** option in Teams.

    ## Get a free Azure account

    If you wish to host your app or access resources in Azure, you must have an Azure subscription. Create a free account before you begin.

    Now youâ€™ve got all tools and set up your account. Next, let's set up your development environment and start building! Select the app you want to do first

- title: Create project workspace for your tab app using C#
  durationInMinutes: 1
  content: |

   Start Microsoft Teams app development by creating your first app. This app uses the tab capability.
    
    If the prerequisites are in place, let's begin!

    The following steps help you to create project workspace for your tab app in Visual Studio

    1. Open Visual Studio.

       The following page appears:

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/visual-studio-v4.png" alt-text="Open Visual Studio":::

    1. Select **Create a new project**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/select-create-project-v4.png" alt-text="Select create project":::

    1. Enter **Teams** in the search box.
    1. Select **Microsoft Teams App** and select **Next**.
    
        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/enter-teams-v4.png" alt-text="Enter Teams":::

       Configure your new project page appears.

    1. Enter the following details to configure your new project.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/enter-project-name-v4.png" alt-text="Enter Project name":::

        1. Enter required project name in **Project name**.
        1. Select required location to save project files and folders.
        1. Select **Create**.
    
       Create a new Teams application window displays:

    1. Select **Tab** and select **Create**.   

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/select-tab-v4.png" alt-text="Select tab":::

       Now Teams tab app is created in a few seconds.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/tap-app-in-vs-v4.png" alt-text="Project Creation":::     

    ## Take a tour of tab app source code
      
    Teams Toolkit provides all components for building an app. After creating the project, you can view the project folders and files under **Solution Explorer**.  
        
        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/solution explorer-v4.png" alt-text="solution explorer"::::::

    Although you're free to choose any UI framework (or not to use any), this sample template code provides a scaffolding with React components.

    Among other items in this directory structure, the Toolkit maintains:

    | Folder name | Contents |
    | --- | --- |
    | `.fx/configs` | Configuration files that user can customize for the Teams app. |
    | - `.fx/configs/config.<envName>.json` | Configuration file for every environment. |
    | - `.fx/configs/azure.parameters.<envName>.json` | Parameters file for Azure BICEP provision for every environment. |
    | - `.fx/configs/projectSettings.json` | Global project settings that apply to all environments. |
    | - `.fx/states` | Provision output that is generated by Teams Toolkit.  The toolkit creates this folder after you provision resources for your app. |
    | - `.fx/states/state.<envName>.json` | Provision output file for every environment. |
    | - `.fx/states/<env>.userdata` | Sensitive user data for the provision output for every environment. |
    | `templates/appPackage` | App manifest template files, and the app icons: color.png and outline.png. |
    | - `templates/appPackage/manifest.template.json` | App manifest for running the app in local or remote environment.  |
    | `templates/azure` | BICEP template files |

- title: Build and run your first tab app using C#
  durationInMinutes: 1
  content: |

    After you set up your project workspace with Teams Toolkit, build your tab app. 
    You'll need to sign in to your Microsoft 365 account.

    ## Sign in to your Microsoft 365 account

    Use your Microsoft 365 account to sign in to Teams. If you're using a Microsoft 365 developer program tenant, the admin account you set up while registering is your Microsoft 365 account.

    1. Right-click on **Mytabapp** under **Solution Mytabapp**.

    1. Select **Teams Toolkit** > **Prepare Teams App Dependencies**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/teams-app-dependencies-v4.png" alt-text="Teams app Dependencies":::
    
    1. Select **Microsoft 365 Account** and select **Continue**. 

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/select-m365-account-v4.png" alt-text="Select-M365-account":::

    ## Build and run your app locally in Visual Studio

    To build and run your app locally:

    1. From Visual Studio, select **F5** or **Debug** > **Start Debugging** to run the application in debug mode.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/start-debugging-v4.png" alt-text="Start Debugging":::

       Teams web client opens in a browser window.

    1. Sign in with your Microsoft 365 account, if prompted. 

    1. Select **Add** when prompted to upload a custom app onto Teams on your local machine.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/select-add-v4.png" alt-text="Select Add":::

       Congratulations, your first tab app is running on Teams!

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-csharp/final-output-vs-v4.png" alt-text="Screenshot shows the final output of the csharp app.":::

      <details>
      <summary>Learn how to troubleshoot if your app doesn't run locally.</summary>

      To successfully run your app in Teams, ensure that you've enabled custom app upload in your Teams account. You can learn more about custom app upload in the prerequisites section.

      </details>   
           
- title: Congratulations!
  durationInMinutes: 1
  content: |

    You've done it!

    You've created a tab app.

    Now that you've learned to create a basic app.

    That's it! Teams Toolkit adds the scaffolding for the new capability to your app's directory structure. 

    You've completed the tutorial to build tab app using C#.
