### YamlMime:Tutorial
title: Build your first tab app using JavaScript
metadata:
  title: Hello World with JavaScript
  description: With this learning module, you learn how to build Hello World app with JavaScript by setting up a new project with Teams Toolkit, build and deploy a tab app.  
  audience: Developer
  level: Beginner
  ms.date: 05/26/2022
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/toolkit/toolkit-v4/teams-toolkit-tutorial-v4.md
  nextTutorialTitle: Back to Teams app tutorials
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    Start Microsoft Teams app development with your first Teams app. 
    You can create a tab app with Teams. 

    Your app will have a capability, which comes with its own UI and UX:
    
    :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/your-helloworld-app-v4.png" alt-text="Screenshot showing this app has three features.":::
    
    > [!NOTE]
    > In this tutorial, you can create a tab app with JavaScript.

    In this tutorial, you learn:

    - How to set up a new project with Teams Toolkit.
    - How to build a tab app.
    - The structure of the app:
        - The tab portion with JavaScript using React.
        - The rest of the features with Node.js.
    - How to deploy your app.

- title: Prerequisites
  durationInMinutes: 1
  content: |

   Here's a list of tools you need for building and deploying your apps.

   | &nbsp; | Install | For using... |
   | --- | --- | --- |
   | **Required** | &nbsp; | &nbsp; |
   | &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript, TypeScript, or SharePoint Framework (SPFx) build environments. Use version 1.55 or later. |
   | &nbsp; | [Teams Toolkit](#tabpanel_1_vscode) | A Microsoft Visual Studio Code extension that creates a project scaffolding for your app. Use 4.0.0 version. |
   | &nbsp; | [Node.js](https://nodejs.org/en/download/) | Back-end JavaScript runtime environment. For more information, see [Node.js version compatibility table for project type](~/toolkit/build-environments.md#nodejs-version-compatibility-table-for-project-type).|
   | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, call - all in one place.|
   | &nbsp; | [Microsoft&nbsp;Edge](https://www.microsoft.com/edge) (recommended) or [Google Chrome](https://www.google.com/chrome/) | A browser with developer tools. |
   | **Optional** | &nbsp; | &nbsp; |
   | &nbsp; | [Azure Tools for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) and [Azure CLI](/cli/azure/install-azure-cli) | Azure tools to access stored data or to deploy a cloud-based backend for your Teams app in Azure. |
   | &nbsp; | [React Developer Tools for Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) OR [React Developer Tools for Microsoft&nbsp;Edge](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | A browser DevTools extension for the open-source React JavaScript library. |
   | &nbsp; | [Microsoft Graph Explorer](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graph Explorer, a browser-based tool that lets you run a query from Microsoft Graph data. |
   | &nbsp; | [Developer Portal for Teams](https://dev.teams.microsoft.com/) | Web-based portal to configure, manage, and distribute your Teams app including to your organization or the Microsoft Teams Store. |


   > [!TIP]
   > If you work with Microsoft Graph data, you should learn about and bookmark the Microsoft Graph Explorer. This browser-based tool allows you to query Microsoft Graph outside of an app.


   ## Prepare development environment

   After you've installed the required tools, set up the development environment.


   ### Install the Teams Toolkit

   The Microsoft Teams Toolkit helps simplify the development process with tools to provision and deploy cloud resources for your app, publish to the Teams Store, and more. 
    
   You can use the toolkit with Visual Studio Code, or CLI (command-line interface), called `TeamsFx`.


   # [Visual Studio Code](#tab/vscode)

   1. Open Visual Studio Code and select the **Extensions** view (**Ctrl+Shift+X** / **⌘⇧-X** or **View > Extensions**).
   1. In the search box, enter **Teams toolkit**.
   1. Select **Install** next to the Teams Toolkit.

      :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/install-toolkit-vscodeversion-v4.png" alt-text="Illustration shows the Teams Toolkit extension installation.":::

    The Teams Toolkit icon appears in the Visual Studio Code **Activity Bar** after it's installed.

    :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/hw-teams-toolkit-sidebar-icon-v4.png" alt-text="Illustration shows the Teams Toolkit icon in Visual Studio Code sidebar.":::

   You can also find the Teams Toolkit on the [Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).
   
   > [!NOTE]
   > The latest version of Teams Toolkit is 4.2.0.


   # [Command line](#tab/cli)

   To install the TeamsFx CLI, use the `npm` package manager:

   ``` bash
   npm install -g @microsoft/teamsfx-cli
   ```

   Depending on your configuration, you may need to use `sudo` to install the CLI:

   ``` bash
   sudo npm install -g --unsafe-perm @microsoft/teamsfx-cli
   ```

   This condition is more common on Linux and macOS systems.

   Ensure you add the npm global cache to your PATH. This step is normally done as part of the Node.js installer.  

   You can use the CLI with the `teamsfx` command. Verify that the command is working by running `teamsfx -h`.

   > [!CAUTION]
   > Before you can run TeamsFx in PowerShell terminals, you must enable the "remote signed" execution policy for PowerShell.

   ---

   ## Set up your Teams development tenant

   A **tenant** is like a space, or a container for your organization in Teams, where you chat, share files, and run meetings. This space is also where your upload and test your custom app. Let's verify if you're ready to develop with the tenant.

   ### Check for custom app upload option

   After creating the app, you must load your app in Teams without distributing it. This process is known as custom app upload. Sign in to your Microsoft 365 account to view this option.

    > [!NOTE]
    > Custom app upload is necessary for previewing and testing apps in Teams local environment. If it isn't enabled, you will not be able to preview and test your app in Teams locally.

   Do you already have a tenant, and do you have the admin access? Let's check if you really do!

   Verify if you can upload a custom app in Teams:

    1. In the Teams client, select the **Apps**.
    1. Select **Manage your apps**.
    1. Select **Upload an app**.
    1. Look for the option to **Upload a customised app**. If you see the option, custom app upload is enabled.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/upload-custom-app-v4.png" alt-text="Screenshot shows the option to Upload a customised app in Teams.":::

        > [!NOTE]
        > If you don't have the option to upload a custom app, talk to your Teams administrator.

   ### Create a free Teams developer tenant (optional)

   If you don't have a Teams developer account, you can get it free. Join the Microsoft 365 developer program!

   1. Go to the [Microsoft 365 developer program](https://developer.microsoft.com/microsoft-365/dev-program).
   1. Select **Join Now** and follow the onscreen instructions.
   1. In the welcome screen, select **Set up E5 subscription**.
   1. Set up your administrator account. After you finish, the following screen appears.

       :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/microsoft-365-v4.png" alt-text="Microsoft":::

   1. Sign in to Teams using the administrator account you just set up. Verify that you have the **Upload a custom app** option in Teams.

   ## Get a free Azure account

   If you wish to host your app or access resources in Azure, you must have an Azure subscription. [Create a free account](https://azure.microsoft.com/free/) before you begin.

   Now you’ve got all tools and set up your account. Next, let's set up your development environment and start building! Select the app you want to do first.

- title: Create project workspace for your tab app
  durationInMinutes: 1
  content: |

    Start Microsoft Teams app development by creating your first app. This app uses the tab capability.

    :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/your-helloworld-app-tab-v4.png" alt-text="Diagram showing this app has three features. Tab is highlighted.":::

    In this page, you learn:
    1. [How to set up a new tab project with Teams Toolkit](#create-your-tab-project-workspace)
    1. [About the directory structure of your app](#take-a-tour-of-the-tab-app-source-code)

    ## Create your tab project workspace

    If the prerequisites are in place, let's begin!

    > [!NOTE]
    > The Visual Studio Code UI shown is from Mac. It may differ depending on your operating system, Teams Toolkit version, and environment.

    # [Visual Studio Code](#tab/vsc)

    1. Open Visual Studio Code.
    1. Select the Teams Toolkit :::image type="icon" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/teams-toolkit-sidebar-icon-v4.png" border="false"::: icon in the Visual Studio Code **Activity Bar**.

    1. Select **Create a new app**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/create-project-v4.png" alt-text="Location of the Create New Project link in the Teams Toolkit sidebar.":::

    1. Select **Create a new Teams app** to create an app using Teams Toolkit.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/create-new-app1-v4.png" alt-text="Wizard starts for creating a new project":::

    1. Ensure that **Tab** is selected as the capability that you want to build in your app. Select **OK**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/select-capabilities-tabapp-v4.png" alt-text="Select App Capability":::

    1. Select **JavaScript** as the programming language.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/select-language-tab-v4.png" alt-text="Screenshot showing how to select the programming language.":::
    
    1. Select **Default folder** to store your project root folder in default location.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/select-default-location-v4.png" alt-text="Select default location":::

       You can also change the default location by the following steps:

          1. Select **Browse**.

             :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/select-browse-v4.png" alt-text="Select browse for storage":::

          1. Select the location for project workspace.

          1. Select the **Select Folder**.

              :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/select-folder-v4.png" alt-text="select-folder":::

    1. Enter a suitable name for your app. Select **Enter**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/enter-name-tab1-v4.png" alt-text="Screenshot showing where to enter the app name.":::

        The Teams tab app is created in a few seconds.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/tap-app-created1-v4.png" alt-text="Screenshot showing the app created.":::

        After your app is created, Teams Toolkit displays the following message:

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/preview-project-v4.png" alt-text="Preview Project.":::
        
        You can select **Local debug** to preview your project. 
        
        <details>
        <summary>A quick recap of creating a Teams app.</summary>
         Watch this short recap for creating a Teams app.

        ![Create a Teams app](~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/javascript-tab-app1-v4.gif)
        </details>

    # [Command line](#tab/cli)

    Use the `teamsfx` CLI to create your first project. Start from the folder where you want to create the project folder.

    ``` bash
    teamsfx new
    ```
    You can use the CLI to create a new Teams app. The CLI leads you through a series of questions. Every question includes an instruction on answering it.

    For example, use arrow keys to select an option. After you make the choice, select **Enter** to confirm it.

    1. Select **Create a new Teams app**.
    1. Select the **Tab** capability.
    1. Select **Azure** frontend hosting.
    1. Don't select any cloud resources.
    1. Select **JavaScript** as the programming language.
    1. Press **Enter** to select the default workspace folder.
    1. Enter `helloworld` as the name for your app. The name of the app must have only alphanumeric characters.

      After you've answered all the questions, your project is created.

    ---

    ## Take a tour of the tab app source code

    Teams Toolkit provides all components for building an app. After creating the project, you can view the project folders and files in the **Explorer** area of Visual Studio Code.

    :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/folder-structure-tab-app-v4.png" alt-text="structure tab":::

    Although you're free to choose any UI framework (or not to use any), this sample template code provides a scaffolding with React components.

    Among other items in this directory structure, the Toolkit maintains:

    | Folder name | Contents |
    | --- | --- |
    | `.fx/configs` | Configuration files that user can customize for the Teams app. |
    | - `.fx/configs/config.<envName>.json` | Configuration file for every environment. |
    | - `.fx/configs/azure.parameters.<envName>.json` | Parameters file for Azure BICEP provision for every environment. |
    | - `.fx/configs/projectSettings.json` | Global project settings that apply to all environments. |
    | - `.fx/states` | Provision output that is generated by Teams Toolkit.  The toolkit creates this folder after you provision resources for your app. |
    | - `.fx/states/state.<envName>.json` | Provision output file for every environment. |
    | - `.fx/states/<env>.userdata` | Sensitive user data for the provision output for every environment. |
    | `tabs` | Code for the Tab capability needed at runtime, such as the privacy notice, terms of use, and configuration tabs. |
    | - `tabs/src/index.jsx` | Entry point for the front-end app, where the main App component is rendered with `ReactDOM.render()` |
    | - `tabs/src/components/App.jsx` | Code for handling URL routing in the app. It calls the [Microsoft Teams JavaScript client library](~/tabs/how-to/using-teams-client-library.md) to establish communication between your app and Teams. |
    | - `tabs/src/components/Tab.jsx` | Code to implement the UI of your app. |
    | - `tabs/src/components/TabConfig.jsx` | Code to implement the UI that configures your app. |
    | `templates/appPackage` | App manifest template files, and the app icons: color.png and outline.png. |
    | - `templates/appPackage/manifest.template.json` | App manifest for running the app in local or remote environment.  |
    | `templates/azure` | BICEP template files |

    When you add the cloud functionality, Teams Toolkit adds the necessary folders to the project. The `api` folder holds the code to any Azure Functions you write.

- title: Build and run your first tab app
  durationInMinutes: 1
  content: |

    After you set up your project workspace with Teams Toolkit, build your tab project. 
    You need to sign in to your Microsoft 365 account.

    ## Sign in to your Microsoft 365 account

    Use your Microsoft 365 account to sign in to Teams. If you're using a Microsoft 365 developer program tenant, the admin account you set up while registering is your Microsoft 365 account.

    # [Visual Studio Code](#tab/viscode)

    1. Open Visual Studio Code.
    1. Select the Teams Toolkit :::image type="icon" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/teams-toolkit-sidebar-icon-v4.png"::: icon in the sidebar.
    1. Select **Sign in to M365**.

        Your default web browser opens to let you sign in to the account.

    1. Sign in to your Microsoft 365 account using your credentials.
    1. Close the browser when prompted and return to Visual Studio Code.
    1. Return to Teams Toolkit within Visual Studio Code.

        The **ACCOUNTS** section of the sidebar shows your Microsoft 365 account name. If custom app upload is enabled for your Microsoft 365 account, Teams Toolkit displays **Sideloading enabled**.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/m365-sideloading-enabled-v4.png" alt-text="Screenshot showing where to sign in to Microsoft 365 and Azure.":::

        Now you're ready to build the app and run it in the local environment!

    # [Command line](#tab/cline)

    1. Sign in to Microsoft 365 with the TeamsFx CLI:

        ``` bash
        teamsfx account login m365
        ```

        Your default web browser opens to let you sign in to the account. Sign in to your Azure account using your credentials. Close the browser when you're prompted.

    2. Sign in to Azure with the TeamsFx CLI:

        ``` bash
        teamsfx account login azure
        ```

        Your default web browser opens to let you sign in to the account. Sign in to your Azure account using your credentials. Close the browser when you're prompted.

        The account logins are shared between Visual Studio Code and the TeamsFx CLI.

        Now that the development environment is configured, you can create, build, and deploy your first Teams app.

    ---

    ## Build and run your app locally in Visual Studio Code

    To build and run your app locally:

    1. From Visual Studio Code, select **F5** to run the application in debug mode.

        <!-- markdownlint-disable MD033 -->

        <details>
        <summary>Learn what happens when you run your app locally in the debugger.</summary>

        In case you're wondering, when you press the **F5** key, Teams Toolkit:

        1. Checks for the following prerequisites:
          * You're logged in with a Microsoft 365 account.
          * Custom app upload is enabled for your Microsoft 365 account.
          * Supported Node.js version is installed.
          * Development certificate for localhost is installed.           
          * Port is available for the tab app.

          > [!NOTE]
          > If Teams Toolkit is unable to check a particular prerequisite, it prompts you to check it.

        2. Install NPM packages.
        3. Registers the app with Microsoft Entra ID and configures the app.
        4. Registers the app in Teams Developer Portal and configures the app.
        5. Starts the tab app.
        6. Starts Teams in a web browser and uploads the tab app.

        </details>

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/f5-build-and-run-v4.png" alt-text="Screenshot showing when F5 key is pressed.":::

        > [!NOTE]
        > When you run the app for the first time, all dependencies are downloaded, and the app is built. A browser window opens when the build is complete. This process can take 3-5 minutes to complete.

        The toolkit prompts you to install a local certificate, if necessary. This certificate allows Teams to load your application from `https://localhost`.

    1. Select **Yes** if the following dialog appears:

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/hw-warning-v4.png" alt-text="microsoft":::

        Or select **Continue**, depending on your operating system:

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/ssl-prompt-mac-v4.png" alt-text="Screenshot showing the prompt to install an SSL certificate to enable Teams to load your application from localhost on Mac.":::

        Teams web client opens in a browser window.

        > [!NOTE]
        > If the toolkit doesn't prompt you to install a certificate, you must install the certificate manually. For more information, see [Add manual certificate](/skype-sdk/sdn/articles/installing-the-trusted-root-certificate#adding-certificate-snap-ins).

    1. Sign in with your Microsoft 365 account, if prompted.

    1. Select **Add** when prompted to upload a custom app onto Teams on your local machine.

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/add-tab-app-local-debug-v4.png" alt-text="Add the app to Teams":::

    1. Congratulations, your first app is running on Teams!

        :::image type="content" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/tab-app-localdebug-v4.png" alt-text="Screenshot of the completed app":::

       You can add SSO feature to retrieve the user details. You can do normal debugging activities, such as setting breakpoints, as if it were any other web application. The app supports hot reloading. If you change any file within the project, the page will be reloaded.

      <!-- markdownlint-disable MD033 -->

      <details>
      <summary>Learn how to troubleshoot if your app doesn't run locally.</summary>

      To successfully run your app in Teams, ensure that you've enabled custom app upload in your Teams account. You can learn more about custom app upload in the prerequisites section.

      </details>

     
- title: Deploy your first Teams app
  durationInMinutes: 1
  content: |

    You've learned to create, build, and run Teams app with Tab app. The final step is to deploy your app on Azure.

    Let's deploy the first app with Tab capability on Azure using Teams Toolkit.

    ## Sign in to your Azure account

    Use this account to access the Microsoft Azure portal and to provision new cloud resources to support your app.

    # [Visual Studio Code](#tab/viscode)

    1. Open Visual Studio Code.
    1. Open the project folder in which you created the tab app.
    1. Select the Teams Toolkit  :::image type="icon" source="~/toolkit/toolkit-v4/sbs-v4/images-sbs/sbs-gs-javascript-v4/teams-toolkit-sidebar-icon-v4.png"::: icon in the sidebar.
    1. Select **Sign in to Azure**.

        > [!TIP]
        > If you have the Azure Account extension installed and are using the same account, you can skip this step. Use the same account as you're using in other extensions.

        Your default web browser opens to let you sign in to the account.
    1. Sign in to your Azure account using your credentials.
    1. Close the browser when prompted and return to Visual Studio Code.

        The **ACCOUNTS** section of the sidebar shows the two accounts separately. It also lists the number of usable Azure subscriptions available to you. Ensure you have at least one usable Azure subscription available. If not, sign out and use a different account.

        Now you're ready to deploy your app to Azure!

        Congratulations, you've created a Teams app! 
        Now let's go ahead and learn how to deploy one of the apps to Azure using the Teams Toolkit.

    # [Command line](#tab/cline)

    1. Sign in to Microsoft 365 with the TeamsFx CLI:

        ``` bash
        teamsfx account login m365
        ```

        Your default web browser opens to let you sign in to the account. Sign in to your Azure account using your credentials. Close the browser when you're prompted.

    2. Sign in to Azure with the TeamsFx CLI:

        ``` bash
        teamsfx account login azure
        ```

        Your default web browser opens to let you sign in to the account. Sign in to your Azure account using your credentials. Close the browser when you're prompted.

        The account logins are shared between Visual Studio Code and the TeamsFx CLI.

        Congratulations, you've created a Teams app! 
        Now let's go ahead and learn how to deploy one of the apps to Azure using the Teams Toolkit.

    ---

      [!INCLUDE [Provision and Deploy your app on Azure](~/includes/get-started/azure-provisioning-instructions-tab.md)]

      <!-- markdownlint-disable MD033 -->
      <details>
      <summary>Learn what happens when you deployed your app to Azure</summary>

      Before deployment, the application has been running locally:

      * The backend runs using **Azure Functions Core Tools**.
      * The application HTTP endpoint, where Microsoft Teams loads the application, runs locally.

      Deployment is a two-step process. You provision the resources on an active Azure subscription, and then deploy or upload the backend and frontend code for the application to Azure.

      * The backend, if configured, uses various Azure services, including Azure App Service and Azure Storage.
      * The frontend application will be deployed to an Azure Storage account configured for static web hosting.

      </details>

- title: Congratulations!
  durationInMinutes: 1
  content: |

    You've done it!

    You've created a tab app.

    Now that you've learned to create a basic app, you can move on to creating more complex apps. To start with, try adding capabilities to your existing apps.

    To add capabilities to your existing app:

    1. Select **Add features** from the **Development** section of the Teams Toolkit sidebar.

    1. Select the capability you want to add to your app.

    That's it! Teams Toolkit adds the scaffolding for the new capability to your app's directory structure. Follow the procedures to build and deploy the app, and your app will have multiple capabilities. 

    You've completed the tutorial to build tab app with JavaScript.
    
