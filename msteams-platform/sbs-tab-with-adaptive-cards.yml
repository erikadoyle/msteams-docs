### YamlMime:Tutorial
title: Build Tab with Adaptive Cards
metadata:
  title: Build Tab with Adaptive Cards
  description: Learn how to set up Adaptive Cards in a tab on desktop and mobile for Microsoft Teams.
  audience: Developer
  level: Beginner
  ms.date: 12/23/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: tabs/how-to/authentication/tab-sso-overview.md
  nextTutorialTitle: Read more on tab authentication
  ms.custom: mvc
  ms.localizationpriority: high
items:
- durationInMinutes: 1
  content: |
    You can build Adaptive Card tabs in Teams. Instead of embedding web content in an iFrame, you can render Adaptive Cards to a tab. While the front end is rendered with Adaptive Cards, the backend is powered by a bot. The bot is responsible for accepting requests and responding appropriately with the Adaptive Card that is rendered.

    > [!WARNING]
    > Adaptive Card tabs will be deprecated in the new Microsoft Teams. Apps are expected to be available in the new Microsoft Teams by June 2023. If your app is using Adaptive Card tabs, it's recommended to rebuild the tab as a web-based tab. For more information, see [Build tabs for Teams](tabs/what-are-tabs.md).

    You can build your tabs with relevant user interface (UI) building blocks, which are native to desktop, web, and mobile.

    This article helps you to understand:
    
    * Changes required to be made to the app manifest.
    * Identifies how the invoke activity requests and sends information in tab with the Adaptive Cards.
    * Effects on the task module workflow.
    
    This step-by-step guide helps you to build tabs with the Adaptive Cards on desktop and mobile. You'll see the following output:

    :::image type="content" source="~/assets/images/adaptive-cards/desktop-mobile-screenshot.png" alt-text="Screenshot of the Tab Adaptive Card output after you have successfully completed the step-by-step guide.":::

- title: Prerequisites
  durationInMinutes: 1
  content: |
    Ensure that you install the following tools and set up your development environment:

     &nbsp; | Install | For using... |
     | --- | --- | --- |
     | &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams to collaborate with everyone you work with through apps for chat, meetings, and call-all in one place.|
     | &nbsp; | [Visual Studio 2022](https://visualstudio.microsoft.com)<br> | You can install the enterprise version in Visual Studio 2022, and install the ASP.NET and web development workloads. Use the latest version. |
     | &nbsp; | [.NET Core SDK](https://dotnet.microsoft.com/en-us/download) | Customized bindings for local debugging and Azure Functions app deployments. Use the latest version or install the portable version. |
     | &nbsp; | [ngrok](https://ngrok.com/download) | Teams app features (conversational bots, message extensions, and incoming webhooks) require inbound connections. A tunnel connects your development system to Teams. It isn't required for apps that only include tabs. This package is installed within the project directory (using npm `devDependencies`). |
     | &nbsp; | [Microsoft 365 developer account](/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant) | Access to Teams account with the appropriate permissions to install an app. |
     
- title: Create and register your bot
  durationInMinutes: 2
  content: |

    Register your bot with Azure Bot service when you develop and host it in Azure. Perform the following steps:

    1. Create a ngrok tunnel to your web server's endpoints.
    1. Create Azure Bot resource to register bot with Azure Bot service.
    1. Create client secret that enables single sign-on (SSO) authentication of the bot.
    1. Add Microsoft Teams channel to deploy the bot to a Teams channel.
    1. Add messaging endpoint to the ngrok tunnel you created.

    **To create Azure Bot resource**

    1. Go to [Azure portal](https://portal.azure.com/).
    1. Select **Create a resource**.

       :::image type="content" source="~/assets/images/adaptive-cards/create-resource.png" alt-text="Screenshots shows the selection of Azure services.":::

    1. Search for **Azure Bot** in the search box.
    1. Select **Azure Bot**.
    1. Select **Create**.

       :::image type="content" source="~/assets/images/adaptive-cards/azure-bot.png" alt-text="Screenshot shows the selection of Create Azure bot.":::

    1. In the **Create an Azure Bot** window that appears, enter the required bot handle name in **Bot handle**.
    1. Select your **Subscription** from the dropdown list.
    1. Select your **Resource group** from the dropdown list.
            
       :::image type="content" source="~/assets/images/adaptive-cards/resource-group.png" alt-text="resource group.":::

       To create a new resource group, select **Create new** > enter resource name > select **OK**. Select the required location from **New resource group location** dropdown list.

        :::image type="content" source="~/assets/images/adaptive-cards/newresource.png" alt-text="Screenshot showing the new resource group location.":::

    1. In the **Microsoft App ID** section, by default **Create new Microsoft App ID** is selected. 
    
       You can also select **Use existing app registration** and enter **App ID**, **App tenant ID**, and **MSI resource ID**.

       > [!NOTE]
       > You can't create more than one bot with the same **Microsoft App ID**.

    1. Select **Type of App** as **Multi Tenant**.

    1. Select **Review + create**.

        :::image type="content" source="./assets/images/adaptive-cards/tenant-review.png" alt-text="Screenshot shows the selection of tenant and to review.":::

    1. If the validation passes, select **Create**.

       It takes a few moments for your bot service to be provisioned.

        :::image type="content" source="~/assets/images/adaptive-cards/validation-pane.png" alt-text="Screenshot of Create an Azure Bot with Validation passed highlighted in red.":::

    1. Select **Go to resource**.

        :::image type="content" source="~/assets/images/adaptive-cards/go-to-resource-card.png" alt-text="Screenshot of deployment complete with Go to resource option highlighted in red.":::

        Your Azure bot is created.

        :::image type="content" source="~/assets/images/adaptive-cards/azure-bot-ui.png" alt-text="Screenshot of the Azure bot Home page that is created.":::

       :::image type="content" source="~/assets/images/adaptive-cards/azure-bot-ui_1.png" alt-text="azure bot resource created.":::
        
    **To create client secret**

    Perform the following steps if you've created a new **Microsoft App ID**:

    1. In left pane, select **Configuration**.
    
    1. Next to **Microsoft App ID**, select **Manage Password**.

       > [!TIP]
       > Save the **Microsoft App ID** or **Client ID** for future reference.

       :::image type="content" source="~/assets/images/adaptive-cards/manage-bot-label.png" alt-text="Screenshot of Microsoft App ID option under Configuration page with the Manage option highlighted.":::

    1. In the **Client secrets** section, select **New client secret**.  

        :::image type="content" source="~/assets/images/meetings-side-panel/newclientsecret.png" alt-text="Screenshot of Client secret section with New client secret option highlighted in red.":::

        The **Add a client secret** window appears.
        
    1. Enter **Description** to the client secret,
    
    1. Select **Add**.
 
        :::image type="content" source="~/assets/images/adaptive-cards/client-secret.png" alt-text="Screenshot of Add a client secret window with the Add option highlighted in red.":::

    1. In the **Value** column, select **Copy to clipboard**.

        :::image type="content" source="~/assets/images/adaptive-cards/client-secret-value.png" alt-text="Screenshot of Client secret value and the Copy to clipboard icon highlighted in red.":::
       
    **To add the Microsoft Teams channel**

    1. Select **Home**.

    1. Select your bot from **Recent resources**.

    1. Select **Channels** in the left pane and select **Microsoft Teams**.

       :::image type="content" source="~/assets/images/Tab-ME-SSO/channel-teams_1.png" alt-text="Select Teams in channels":::
    
    1. Select the checkbox to accept the **Terms of Service**.
    
    1. Select **Agree**.

       :::image type="content" source="~/assets/images/adaptive-cards/terms.png" alt-text="Screenshot shows the terms and services.":::

    1. Select **Apply**.

       :::image type="content" source="~/assets/images/adaptive-cards/select-teams.png" alt-text="Screenshot of Configure Microsoft Teams displaying the selection of Microsoft Teams Commercial (most common).":::

    **To create a ngrok tunnel**

      Use ngrok to create a tunnel to your locally running web server's publicly available HTTPS endpoints. Run the following command in ngrok:

     ```bash
     ngrok http --host-header=localhost 3978
     ```
     > [!TIP]
     > If you encounter **ERR_NGROK_4018**, follow the steps, as displayed in the command prompt to sign up and authenticate ngrok. Then run the `ngrok http --host-header=localhost`

    **To add messaging endpoint**

    1. From ngrok, copy the HTTPS URL.

       :::image type="content" source="../msteams-platform/assets/images//adaptive-cards/ngrok-url_1.png" alt-text="ngrok HTTPS URL":::
   
    1. Go to the Azure bot you've created in Azure portal. In the left pane, under **Settings**, select **Configuration**.

    1. In **Messaging endpoint**, add the HTTPS URL from ngrok and at the end of the URL add **/api/messages**.

       :::image type="content" source="~/assets/images/adaptive-cards/ngrok-messaging-endpoint_1.png" alt-text="Messaging endpoint.":::

    1. Select **Apply**.

        You have successfully set up a bot in Azure Bot service.

- title: Set up bot service connection
  durationInMinutes: 5
  content: |
    To ensure that the bot service enables users to sign in and access the bot, you must configure SSO for your bot. Perform the following steps to configure:
    
    1. Add Redirect URI to the Azure Bot resource.
    1. Add any necessary API permissions for downstream calls.
    1. Enable implicit grant and hybrid flows.
    1. Update manifest.
    1. Set up bot service connection.

    **To add Redirect URI to the Azure Bot resource**

    1. Go to the [Azure portal](https://portal.azure.com/).

    1. Select **Microsoft Entra ID**.

    1. In the left pane, select **App registrations**.

    1. Select your bot.

    1. Under **Manage**, select **Authentication** to set a redirect URI.

    1. Select **Add a platform** > **Web**.

        :::image type="content" source="~/assets/images/adaptive-cards/web-auth.png" alt-text="Screenshot of Authentication with Add a platform, Configure Web, Redirect URLs, and Configure options are highlighted in red.":::

    1. Enter the **Redirect URIs** as `https://token.botframework.com/.auth/web/redirect`.

    1. Select the following to enable **Implicit grant and hybrid flows**:</br>
       * **ID tokens**
       * **Access tokens**
   
    1. Select **Configure**.

       :::image type="content" source="~/assets/images/adaptive-cards/configure-web_1.png" alt-text="Configure web.":::    

        The Redirect URI is added to the Azure bot resource.

        :::image type="content" source="~/assets/images/adaptive-cards/web-redirect-url-display.png" alt-text="Screenshot of Authentication page with the redirect URL highlighted in red.":::

    1. From the left pane, select, Select **Expose an API**.
    1. Select **Add**.
    1. Use the `api://your ngrok/botid-{AppID}` format for the **Application ID URI**.
    1. Update the **Application ID URI** and select **Save**.

        :::image type="content" source="~/assets/images/adaptive-cards/app-id-url.png" alt-text="Screenshot of the Application ID URL with the redirect URl in the Expose an API section highlighted in red.":::

    1. Select **Add a scope**. 

       :::image type="content" source="~/assets/images/meetings-side-panel/selectscope_2.png" alt-text="Select scope":::

    1. Enter **access_as_user** as the **Scope name**.

    1. Set **Who can consent?** to **Admins and users**.
  
    1. To configure the admin and user consent prompts with appropriate values for **access_as_user** scope, provide the following information in the fields:</br>
    
         * Enter **Teams can access the user’s profile** as **Admin consent display name**.

         * Enter **Allows Teams to call the app’s web APIs as the current user** as **Admin consent description**.

         * Enter **Teams can access the user profile and make requests on the user’s behalf** as **User consent display name**.

         * Enter **Enable Teams to call this app’s APIs with the same rights as the user** as **User consent description**.
  
    1. Ensure that **State** is set to **Enabled**.
  
    1. Select **Add scope** to save.

         The following image shows the fields and the values:

        :::image type="content" source="~/assets/images/Teams-task-module/addascope_1.png" alt-text="Add a scope":::

        In the **Authorized client applications** section, identify the applications that you want to authorize for your app’s web application. 
    
    1. Select **Add a client application**. 

        :::image type="content" source="~/assets/images/meetings-side-panel/selectclientapp_1.png" alt-text="Select client application"::: 

    1. Enter **Client ID**: `1fec8e78-bce4-4aaf-ab1b-5451cc387264` for Teams mobile or desktop application. 

        :::image type="content" source="~/assets/images/meetings-side-panel/addclientapplication1.png" alt-text="Add client application 1"::: 

       Enter **Client ID**: `5e3ce6c0-2b1f-4285-8d4b-75ee78787346` for Teams web application.

        :::image type="content" source="~/assets/images/meetings-side-panel/addclientapplication2.png" alt-text="Add client application 2"::: 

    1. Select **Authorized scopes**.

        :::image type="content" source="~/assets/images/Teams-task-module/authorizedscope.png" alt-text="Add client application 2"::: 

       The following image displays the client IDs:

        :::image type="content" source="~/assets/images/meetings-side-panel/clientapps.png" alt-text="Client applications"::: 

    1. In the left pane, select **API permissions**. 

       > [!NOTE]
       > Users need to consent to the API permissions only if the Microsoft Entra app is registered in a different tenant.

    1. Select **Add a permission**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/add-permission_1.png" alt-text="permission added":::

    1. Select **Microsoft Graph**.

    1. Select **Delegated permissions**.

    1. Add **User.Read** in permission.

    1. Select **Add permissions**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/add-permissions_1.png" alt-text="delegated permissions added":::

    **To update manifest**

    Select **Manifest** from the left pane.

      1. Set the configuration item **"accessTokenAcceptedVersion":2**. If not set, change its value to `2` and select **Save**.
 
         :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/manifest-value.png" alt-text="open the manifest file":::
        
         > [!NOTE]
         > If you're already testing your bot in Teams, sign out of this app and sign out of Teams. To see this change, sign in again.

      **To set up Bot Service connection**

      1. Go to **Configuration page**.

      1. Select **Add OAuth Connection Settings**.

      1. In **New Connection Setting**, enter the following details:

          * **Name**: Enter the name for your new connection setting. You can use the name in the settings of your bot service code.
          * **Service Provider**: Select **Azure Active Directory v2**.
          * **Client ID**: Update your **Microsoft App ID**.
          * **Client secret**: Update the value of the **client secret ID**.
          * **Token Exchange URL**: Use the **Application ID URI**.
          * **Tenant ID**: Enter **common**.
          * **Scopes**: Enter **User.Read**.
     
      1. Select **Save**.

         :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/new-connection-setting_1.png" alt-text="setting new connection":::

    
- title: Configure the bot
  durationInMinutes: 1
  content: |
    Configure the bot sample to understand how to authenticate conversation bot in Teams.

    **To configure and run your bot sample**

    1. Open [Microsoft-Teams-Samples](https://github.com/OfficeDev/Microsoft-Teams-Samples).
    1. Select **Code**.
    1. From the dropdown menu, select **Open with GitHub Desktop**.

       :::image type="content" source="../msteams-platform/assets/images/teams-file-upload-bot/clone-repository.png" alt-text="Screenshot showing the cloning of repository":::

    1. Select **Clone**. 

       > [!NOTE]
       > Ensure that you note the path of the repository that you downloaded.

    1. Go to the **appsettings.json** file in the cloned repository.
           
       :::image type="content" source="./assets/images/adaptive-cards/appsetting-location_1.png" alt-text="appsetting location":::

    1. Open the **appsettings.json** file and update the following information:

         * Set `"MicrosoftAppId"` to your bot's **Microsoft App ID**.
         * Set `"MicrosoftAppPassword"` to your bot's client secret ID value.
         * Set `"ConnectionName"` to your bot's Name.
         * Set `"ApplicationBaseUrl"` to the fully qualified ngrok domain name.
         
        :::image type="content" source="~/assets/images/adaptive-cards/appsettings-json.png" alt-text="Screenshot of Visual Studio displaying appsettings.json file.":::

- title: Configure and upload the app in Teams
  durationInMinutes: 2
  content: |
    The most comprehensive way to test your bot is by creating an app package and uploading it to Teams. This method is to test the full functionality available to your bot across all scopes. You can configure and run the Teams app by uploading the `manifest.zip` file.

    **To configure manifest file**
    
    1. Go to the **manifest.json** file in the cloned repository.      
    1. Open the **manifest.json** file and update the following changes:

    1. Replace all occurrences of `{contentBotId}` and `{Microsoft App ID}` with your bot's Microsoft App ID.

        :::image type="content" source="~/assets/images/adaptive-cards/manifest-vsc.png" alt-text="Screenshot of the manifest with ID and contentBotId attributes highlighted in red.":::

    **Add file upload bot in Teams**

    1. In your cloned repository, Go to **Microsoft-Teams-Samples** > **samples** > **tab-adaptive-cards** > **csharp** > **TabWithAdpativeCardFlow** > **AppPackage**.

    1. Create a .zip file with the following files that are present in the **AppPackage** folder:
       * manifest.json
       * outline.png
       * color.png 

       :::image type="content" source="./assets/images/adaptive-cards/zip.png" alt-text="zip file":::

        > [!NOTE]
        > The `manifest.zip` must not contain any additional folders in it. It must have **manifest** json source file, **color** icon, and **outline** icon inside the zip folder.

    1. In the Teams client, select the **Apps** icon.
    1. Select **Manage your apps**.
    1. Select **Upload an app**
    1. Look for the option to **Upload a custom app**. If you see the option, custom app upload is enabled.

       :::image type="content" source="assets/images/teams-file-upload-bot/custom-upload.png" alt-text="Screenshot showing the selection of Upload a custom app highlighted in red.":::
    
    1. Select the .zip file you've created in the **TeamsAppManifest** folder and select **Open**.

    1. Select **Add**.

        :::image type="content" source="~/assets/images/adaptive-cards/tab-in-teams.png" alt-text="Screenshot of TabAdaptiveCard with Add option highlighted in red.":::

        You can interact with this tab by signing in.
   

    1. Send a message to the tab.

        :::image type="content" source="~/assets/images/adaptive-cards/desktop-mobile-screenshot.png" alt-text="Screenshot of Microsoft Teams chat window displaying a message.":::

- title: Interacting with the Tab in Teams
  durationInMinutes: 1
  content: |
    Tabs allow you to access services and content in a dedicated space within a channel or in a chat.
    
    Perform the following steps to use the tab:

    1. In the left pane of the Teams, select More added apps (●●●).
    1. Select your app from the list. The tab displays the Adaptive Card with action controls.
    1. Select **Sign In** and choose an account to access the tab.

        :::image type="content" source="~/assets/images/adaptive-cards/adaptive-cards-tab-action-controls.png" alt-text="Screenshot of Tab Adaptive card with action controls Tabadaptive on the left pane highlighted in red.":::
    
    1. In the **Home** tab, select **Show Task Module**.

        :::image type="content" source="~/assets/images/adaptive-cards/tab-home-page.png" alt-text="Screenshot of Microsoft Teams with Home and Show Task Module highlighted in red.":::

    1. Select **Close**.

       :::image type="content" source="~/assets/images/adaptive-cards/sample-task-module.png" alt-text="Screenshot of a tab auth response appearing in Microsoft Teams.":::

       :::image type="content" source="~/assets/images/adaptive-cards/task-submit.png" alt-text="Screenshot of Microsoft Teams displaying the AdaptiveCard task/submit request triggered.":::

    1. Tab keeps you signed in unless you select **Sign out**.

        :::image type="content" source="~/assets/images/adaptive-cards/sign-out.png" alt-text="Screenshot of TabAdaptiveCard with Sign out option highlighted in red.":::

    1. Refresh to **Sign In** again.

        :::image type="content" source="~/assets/images/adaptive-cards/success-sign-out.png" alt-text="Screenshot of TabAdaptiveCard displaying successful Sign out message."
- title: Complete challenge
  durationInMinutes: 1
  content: |
    Did you come up with something like this?

    :::image type="content" source="~/assets/images/adaptive-cards/desktop-mobile-screenshot.png" alt-text="Screenshot of the Tab Adaptive Card output after you have successfully completed the step-by-step guide.":::
    
- content: |
    You've completed the tutorial to get started with the Adaptive Cards for Microsoft Teams using the Bot Framework.
